---
apiVersion: v1
kind: ConfigMap  ## 配置集 (ConfigMap) 常用于存储工作负载所需的配置信息，许多应用程序会从配置文件、命令行参数或环境变量中读取配置信息。
metadata:
  namespace: test  ## 命名空间
  name: rabbitmq  ## 名称
  labels:  ## 标签
    app: rabbitmq
  annotations:
    ## 描述信息
    kubesphere.io/description: rabbitmq template
data:  ## 添加数据
  ## 添加键/值对形式数据
  enabled_plugins: |
      [rabbitmq_management,rabbitmq_peer_discovery_k8s].

  rabbitmq.conf: |
      ## Cluster formation. See https://www.rabbitmq.com/cluster-formation.html to learn more.
      cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
      cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
      ## Should RabbitMQ node name be computed from the pod's hostname or IP address?
      ## IP addresses are not stable, so using [stable] hostnames is recommended when possible.
      ## Set to "hostname" to use pod hostnames.
      ## When this value is changed, so should the variable used to set the RABBITMQ_NODENAME
      ## environment variable.
      cluster_formation.k8s.address_type = hostname
      ## How often should node cleanup checks run?
      cluster_formation.node_cleanup.interval = 30
      ## Set to false if automatic removal of unknown/absent nodes
      ## is desired. This can be dangerous, see
      ##  * https://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup
      ##  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_partition_handling = autoheal
      ## See https://www.rabbitmq.com/ha.html#master-migration-data-locality
      queue_master_locator=min-masters
      ## This is just an example.
      ## This enables remote access for the default user with well known credentials.
      ## Consider deleting the default user and creating a separate user with a set of generated
      ## credentials instead.
      ## Learn more at https://www.rabbitmq.com/access-control.html#loopback-users
      loopback_users.guest = false
---
apiVersion: v1
kind: Secret  ## 密钥 (Secret) 是一种包含少量敏感信息的资源对象，例如密码、token、秘钥等，以键/值对形式保存并且可以在容器组中使用。
metadata:
  namespace: test  ## 命名空间
  name: rabbitmq  ## 名称
  labels:
    app: rabbitmq
  annotations:
    ## 描述信息
    kubesphere.io/description: rabbitmq template
type: Opaque  ## Opaque：base64编码格式的Secret，用来存储密码、密钥等。
data:  ## 数据秘钥，由键值对组成
  username: YWRtaW4=  ## 账号/密码：admin/admin
  password: YWRtaW4=  ## echo -n admin | base64
---
apiVersion: v1
kind: ServiceAccount  ## 服务帐户 (Service Account) 为 Pod 中运行的进程提供了一个标识，用于访问 API Server
metadata:
  name: rabbitmq
  namespace: test
---
kind: Role  ## 规则权限
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rabbitmq-peer-discovery-rbac
  namespace: test
rules:
- apiGroups: [""]  ## 核心API
  resources: ["endpoints"]  ## 要操作的资源
  verbs: ["get"]  ## 操作资源对应具体的权限
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
---
kind: RoleBinding  ## 将角色中定义的权限授予用户或用户组
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rabbitmq-peer-discovery-rbac
  namespace: test
subjects:
- kind: ServiceAccount
  name: rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rabbitmq-peer-discovery-rbac
---
apiVersion: v1
kind: Service  ## 服务 (Service) 是定义了一类容器组的逻辑集合和一个用于访问它们的策略。
metadata:
  namespace: test  ## 命名空间
  name: rabbitmq-management  ## 名称
  labels:  ## 服务标签
    app: rabbitmq-management
  annotations:
    ## 描述信息
    kubesphere.io/description: rabbitmq-management template
spec:
  selector:  ## 指定工作负载
    app: rabbitmq  ## 工作负载标签
  ports:  ## 设置容器镜像暴露的端口以及服务端口
    - name: rabbitmq-http  ## 名称
      protocol: TCP  ## 协议
      targetPort: 15672  ## 服务端口
      port: 15672  ## 容器端口
      nodePort: 15673  ## 节点端口
    - name: rabbitmq  ## 名称
      protocol: TCP  ## 协议
      targetPort: 5672  ## 服务端口
      port: 5672  ## 容器端口
      nodePort: 5673  ## 节点端口
  type: NodePort  ## 通过访问集群节点的对应端口来访问服务(NodePort)
  sessionAffinityConfig:  ## 开启回话保持
    clientIP:
      timeoutSeconds: 10800  ## 最大会话保持时间(秒)，会话保持时间默认是 10800 秒(即 3 小时)
---
apiVersion: v1
kind: Service  ## 服务 (Service) 是定义了一类容器组的逻辑集合和一个用于访问它们的策略。
metadata:
  namespace: test  ## 命名空间
  name: rabbitmq  ## 名称
  labels:  ## 服务标签
    app: rabbitmq
  annotations:
    ## 描述信息
    kubesphere.io/description: rabbitmq template
spec:
  selector:  ## 指定工作负载
    app: rabbitmq  ## 工作负载标签
  ports:  ## 设置容器镜像暴露的端口以及服务端口
    - name: rabbitmq-http  ## 名称
      protocol: TCP  ## 协议
      port: 15672  ## 容器端口
    - name: rabbitmq  ## 名称
      protocol: TCP  ## 协议
      port: 5672  ## 容器端口
  clusterIP: None
  ## 集群内部通过服务的后端Endpoint lP直接访问服务Headless (selector)
  ## 集群不为服务生成IP，集群内部通过服务的后端Endpoint lP直接访问服务。此类型适合后端异构的服务，比如需要区分主从的服务。
  sessionAffinityConfig:  ## 开启回话保持
    clientIP:
      timeoutSeconds: 10800  ## 最大会话保持时间(秒)，会话保持时间默认是 10800 秒(即 3 小时)
---
apiVersion: apps/v1
kind: StatefulSet  ## 工作负载 (Workload) 通常是访问服务的实际载体, 也是对节点日志收集、监控等系统应用的实际运行载体，是对一组容器组 (Pod) 的抽象模型
metadata:
  namespace: test  ## 命名空间
  name: rabbitmq  ## 名称
  labels:  ## 应用标签
    app: rabbitmq
  annotations:
    ## 描述信息
    kubesphere.io/description: rabbitmq template
spec:
  replicas: 3  ## 容器组副本数量
  serviceName: rabbitmq  ## 管理StatefulSet的服务的名称
  selector:
    matchLabels:  ## 应用标签
      app: rabbitmq
  template:
    metadata:
      labels:  ## 应用标签
        app: rabbitmq
    spec:
#      nodeSelector:  ## 匹配节点
#        app: rabbitmq  ## 匹配节点标签
      serviceAccountName: rabbitmq
      terminationGracePeriodSeconds: 0  ## 优雅地终止容器，默认30秒。
      restartPolicy: Always  ## 容器重启策略，Always、OnFailure和Never。默认值是Always。
      containers:
        - name: rabbitmq
          imagePullPolicy: IfNotPresent
          ## IfNotPresent：优先使用本地镜像，如果本地存在镜像就优先使用本地镜像
          ## Always：尝试重新下载镜像，在创建及更新时，每次都会尝试下载新的镜像
          ## Never：仅使用本地镜像，仅会使用本地镜像，如果本地不存在所需镜像，则会导致容器异常
          image: swr.cn-north-1.myhuaweicloud.com/kongyu/rabbitmq:3.8  ## 镜像
          ports:  ## 端口设置
            - name: rabbitmq-http  ## 名称
              protocol: TCP  ## 协议
              containerPort: 15672  ## 容器端口
            - name: rabbitmq  ## 名称
              protocol: TCP  ## 协议
              containerPort: 5672  ## 容器端口
#          resources:  ## 设置容器的资源限制与资源预留，这将能够帮助系统更好地调度容器，提高稳定性。
#            requests:  ## 资源预留
#              cpu: '0.5'
#              memory: 512Mi
#            limits:  ## 资源限制
#              cpu: '1'
#              memory: 1024Mi
          livenessProbe:  ## 容器存活检查
            exec:  ## 命令检查，执行返回结果为0即成功。
              command: ["rabbitmq-diagnostics", "status"]
            initialDelaySeconds: 60  ## 初始延迟(秒)：在检查其运行状况之前，容器启动后需要等待多长时间。
            periodSeconds: 60  ## 执行探测频率(秒)：执行探测的频率（以秒为单位）。默认为10秒。最小值为1。
            timeoutSeconds: 15  ## 超时时间(秒)：等待探针完成多长时间。如果超过时间，则认为探测失败。默认为1秒。最小值为1。
          readinessProbe:  ## 就绪探针
            exec:  ## 命令检查，执行返回结果为0即成功。
              command: ["rabbitmq-diagnostics", "ping"]
            initialDelaySeconds: 20  ## 初始延迟(秒)：在检查其运行状况之前，容器启动后需要等待多长时间。
            periodSeconds: 60  ## 执行探测频率(秒)：执行探测的频率（以秒为单位）。默认为10秒。最小值为1。
            timeoutSeconds: 10  ## 超时时间(秒)：等待探针完成多长时间。如果超过时间，则认为探测失败。默认为1秒。最小值为1。
          env:  ## 容器环境变量
            - name: MY_POD_NAME
              valueFrom:
                fieldRef: ## 从api中导入值
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef: ## 从api中导入值
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: K8S_SERVICE_NAME
              value: rabbitmq
            - name: RABBITMQ_NODENAME
              value: rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: K8S_HOSTNAME_SUFFIX
              value: .$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: RABBITMQ_ERLANG_COOKIE
              value: "mycookie"
            - name: RABBITMQ_DEFAULT_VHOST
              value: /
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:  ## 从secret中导入值
                  name: rabbitmq
                  key: username
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:  ## 从secret中导入值
                  name: rabbitmq
                  key: password
          volumeMounts:  ## 存储卷挂载
            - name: data  ## 匹配存储卷
              mountPath: /var/lib/rabbitmq  ## 存储卷挂载路径
            - name: config
              mountPath: /etc/rabbitmq
            - name: localtime  ## 匹配存储卷
              mountPath: /etc/localtime  ## 存储卷挂载路径
              readOnly: true  ## 只读挂载
      volumes:  ## 存储卷
        - name: config
          configMap:
            name: rabbitmq
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
              - key: enabled_plugins
                path: enabled_plugins
        - name: localtime  ## 同步主机时间
          hostPath:  ## 从宿主机挂载
            type: File  ## 文件类型
            path: /etc/localtime  ## 宿主机路径
  volumeClaimTemplates:  ## StatefulSet专属声明PVC
    - metadata:
        name: data  ## PVC名称前缀
      spec:
        accessModes: [ "ReadWriteOnce" ]  ## 访问模式
        storageClassName: local  ## 存储类型(StorageClass)是由集群管理员配置存储服务端参数，并按类型提供存储给集群用户使用。
        resources:
          requests:
            storage: 10Gi  ## 存储卷容量

